class CustomDevTools extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    const puerto = this.getAttribute("puerto");
    const token = this.getAttribute("token");
    const repo = this.getAttribute("repo");

    if (!puerto) {
      console.error("❌ El atributo 'puerto' es requerido en <customDevTools>.");
      return;
    }

    if (!repo) {
      console.error("❌ El atributo 'repo' es requerido en <customDevTools>.");
      return;
    }

    if (!token) {
      console.error("❌ El atributo 'token' es requerido en <customDevTools>.");
      return;
    }

    this.crearUI();
    this.obtenerRepos(puerto);
  }

  crearUI() {
    const body = document.querySelector('#btns-fixed') || document.body;

    this.btnAbrir = document.createElement('button');
    this.btnAbrir.id = "btnAbrir";
    this.btnAbrir.classList.add('bi', 'bi-tools');
    body.appendChild(this.btnAbrir);

    this.devTools = document.createElement('div');
    this.devTools.classList.add('devTools');
    body.appendChild(this.devTools);

    this.span1 = document.createElement('span');
    this.span1.title = "Crear Issue";
    this.span1.innerHTML = '<i class="bi bi-bug"></i><p>Create issue</p>';
    this.devTools.appendChild(this.span1);

    this.span2 = document.createElement('span');
    this.span2.innerHTML = '<i class="bi bi-code"></i><p></p>';
    this.devTools.appendChild(this.span2);

    this.formulario = document.createElement('form');
    this.formulario.id = "formulario";
    this.formulario.style.display = "none";
    body.appendChild(this.formulario);

    this.formulario.innerHTML = `
      <i class="bi bi-github"></i>
      <h3>Crear Issue</h3>
      <select id="selectRepos"></select>
      <br/><br/>
      <input type="text" id="titulo" placeholder="Título del issue" required><br/><br/>
      <textarea id="descripcion" placeholder="Descripción del issue" required></textarea><br/><br/>
      <button id="btnEnviar">Enviar Issue</button>
    `;

    this.agregarListeners();
  }

  agregarListeners() {
    document.addEventListener('click', (e) => {
      if (!this.formulario.contains(e.target) &&
          !this.devTools.contains(e.target) &&
          e.target !== this.btnAbrir) {
        this.formulario.style.display = 'none';
        this.devTools.style.display = 'none';
      }
    });

    this.btnAbrir.addEventListener("click", () => {
      this.devTools.style.display = "flex";
    });

    this.span1.addEventListener('click', () => {
      this.formulario.style.display = "block";
    });

    this.span2.addEventListener('click', () => {
      this.span2.classList.toggle('debug');
      this.span2.childNodes[1].textContent = 'Debug: ' + this.span2.classList.contains('debug');

      document.querySelectorAll('*').forEach(el => {
        el.style.border = this.span2.classList.contains('debug') ? '1px solid red' : '';
      });
    });
  }

  async obtenerRepos(puerto) {
    try {
      const res = await fetch(`http://localhost:${puerto}/api/repos`);
      const data = await res.json();

      const select = this.formulario.querySelector('#selectRepos');
      data.forEach(proy => {
        const option = document.createElement('option');
        option.value = proy.name;
        option.textContent = proy.name;
        select.appendChild(option);
      });

      this.formulario.querySelector('#btnEnviar').addEventListener('click', async (e) => {
        e.preventDefault();
        const titulo = this.formulario.querySelector('#titulo').value;
        const descripcion = this.formulario.querySelector('#descripcion').value;
        const repo = select.value;

        const response = await fetch(`http://localhost:${puerto}/api/crear-issue`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            titulo,
            descripcion,
            pathname: window.location.pathname,
            repo
          })
        });

        if (response.ok) {
          this.showModal('✅ Issue creado con éxito');
          this.formulario.reset();
          this.formulario.style.display = "none";
        } else {
          this.showModal("❌ Error al crear la issue");
        }
      });

    } catch (err) {
      console.error("❌ Error al obtener los repositorios:", err);
    }
  }

  showModal(msg) {
    const bg = document.createElement('div');
    bg.style = `
      background-color: rgba(0,0,0,.4);
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 99;
    `;

    const modal = document.createElement('div');
    modal.style = `
      background-color: #e4dfdf;
      color: black;
      width: 80%;
      height: 50%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    `;

    const mensaje = document.createElement('p');
    mensaje.style.fontSize = '30pt';
    mensaje.innerText = msg;

    const boton = document.createElement('button');
    boton.innerText = 'Cerrar';
    boton.style = 'font-size: 10pt; padding: 10px;';
    boton.addEventListener('click', () => {
      bg.remove();
    });

    modal.appendChild(mensaje);
    modal.appendChild(boton);
    bg.appendChild(modal);
    document.body.appendChild(bg);
  }
}

// Registrar el componente
customElements.define("customDevTools", CustomDevTools);