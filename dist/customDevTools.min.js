class customDevTools extends HTMLElement {
    constructor(puerto) {
        super();

        async function obtenerRepos() {
            try {
                // Obtenemos los repositorios desde el backend
                const response2 = await fetch('http://localhost:'+puerto+'/api/repos');
                const data = await response2.json();

                // Crear el contenedor principal
                const body = document.querySelector('#btns-fixed');

                // Crear y agregar el botón de abrir
                const btnAbrir = document.createElement('button');
                btnAbrir.id = "btnAbrir";
                btnAbrir.classList.add('bi', 'bi-tools');
                body.appendChild(btnAbrir);

                // Crear y agregar el contenedor devTools
                const devTools = document.createElement('div');
                devTools.classList.add('devTools');
                body.appendChild(devTools);

                // Crear los spans dentro de devTools
                const span1 = document.createElement('span');
                span1.title = "Crear Issue";
                span1.innerHTML = '<i class="bi bi-bug"></i><p>Create issue</p>';
                devTools.appendChild(span1);

                const span2 = document.createElement('span');
                span2.innerHTML = '<i class="bi bi-code"></i><p></p>';
                devTools.appendChild(span2);

                // Crear el formulario
                const formulario = document.createElement('form');
                formulario.id = "formulario";
                body.appendChild(formulario);

                const github = document.createElement('i');
                github.classList.add('bi');
                github.classList.add('bi-github');
                formulario.appendChild(github);

                // Crear título
                const h3 = document.createElement('h3');
                h3.innerHTML = 'Crear Issue';
                formulario.appendChild(h3);

                // Crear select con los repositorios
                const select = document.createElement('select');
                formulario.appendChild(select);
                data.forEach((proy) => {
                    const option = document.createElement('option');
                    option.value = proy.name;
                    option.textContent = proy.name;
                    select.appendChild(option);
                });

                // Campos de entrada para el título y descripción del issue
                formulario.innerHTML += `
                <br/>
                <br/>
                <input type="text" id="titulo" placeholder="Título del issue" required><br/><br/>
                <textarea id="descripcion" placeholder="Descripción del issue" required></textarea><br/><br/>
                <button id="btnEnviar">Enviar Issue</button>
            `;

                // Funciones para cerrar el formulario y las devTools al hacer clic fuera de ellos
                function cerrarFormulario(e) {
                    if (!formulario.contains(e.target) && !devTools.contains(e.target) && e.target.id !== 'btnAbrir') {
                        formulario.style.display = 'none';
                    }
                }

                function cerrarDevTools(e) {
                    if (!devTools.contains(e.target) && e.target.id !== 'btnAbrir') {
                        devTools.style.display = 'none';
                    }
                }

                // Agregar listeners
                document.addEventListener('click', (e) => {
                    cerrarDevTools(e);
                    cerrarFormulario(e);
                });

                // Mostrar devTools al hacer clic en el botón
                btnAbrir.addEventListener("click", () => {
                    devTools.style.display = "flex";
                });

                // Mostrar formulario al hacer clic en "Crear issue" dentro de devTools
                span1.addEventListener('click', () => {
                    formulario.style.display = "block";
                });

                // Activar modo debug
                span2.addEventListener('click', () => {
                    span2.classList.toggle('debug');
                    span2.childNodes[1].textContent = 'Debug: ' + span2.classList.contains('debug');

                    if (span2.classList.contains('debug')) {
                        document.querySelectorAll('*').forEach(el => {
                            el.style.border = '1px solid red';
                        });
                    } else {
                        document.querySelectorAll('*').forEach(el => {
                            el.style.border = '';
                        });
                    }
                });

                // Enviar issue al backend
                const btnEnviar = document.getElementById("btnEnviar");
                btnEnviar.addEventListener("click", async (e) => {
                    e.preventDefault();
                    const titulo = document.getElementById("titulo").value;
                    const descripcion = document.getElementById("descripcion").value;
                    const repo = document.querySelector('select').value;

                    const response = await fetch("http://localhost:"+puerto+"/api/crear-issue", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            titulo,
                            descripcion,
                            pathname: window.location.pathname,
                            repo
                        })
                    });

                    if (response.ok) {
                        showModal('✅ Issue creado con éxito');
                        formulario.reset();
                        formulario.style.display = "none";
                    } else {
                        showModal("❌ Error al crear la issue");
                    }
                });

            } catch (error) {
                console.error('Error al obtener los repositorios:', error);
            }
        }

        // Llamar a la función para obtener y mostrar los repositorios
        obtenerRepos();

        let showModal = (msg) => {
            let bg = document.createElement('div');
            bg.style.backgroundColor = 'rgba(0,0,0,.4)';
            bg.style.position = 'fixed';
            bg.style.top = '0';
            bg.style.left = '0';
            bg.style.width = '100%';
            bg.style.height = '100%';
            bg.style.display = 'flex';
            bg.style.alignItems = 'center';
            bg.style.justifyContent = 'center';
            bg.style.zIndex = '99';

            let bgModal = document.createElement('div');
            bgModal.style.backgroundColor = '#e4dfdf';
            bgModal.style.color = 'black';
            bgModal.style.width = '80%';
            bgModal.style.height = '50%';
            bgModal.style.display = 'flex';
            bgModal.style.alignItems = 'center';
            bgModal.style.justifyContent = 'center';
            bgModal.style.flexDirection = 'column';

            let h1 = document.createElement('p');
            h1.style.fontSize = '30pt';
            h1.innerText = msg;

            let button = document.createElement('button');
            button.style.fontSize = '10pt';
            button.style.padding = '10px';
            button.innerText = 'Enviar';
            button.addEventListener('mouseover', () => {
                button.style.cursor = 'pointer';
            })
            button.addEventListener('click', () => {
                bg.style.display = 'none';
            })

            bgModal.appendChild(h1);
            bgModal.appendChild(button);
            bg.appendChild(bgModal);
            document.body.appendChild(bg);

        }
    }
}

// Registrar el componente
customElements.define("mi-componente", customDevTools);
